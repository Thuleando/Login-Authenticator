<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureOraclev10g class="oracle.dbtools.crest.model.design.storage.oracle.v10g.StoredProcedureOraclev10g" name="Login" directorySegmentName="seg_0" id="39CDDAFF-D7B9-2BC0-80A6-B1646093DFA8">
<createdBy>Jason</createdBy>
<createdTime>2014-11-09 06:38:32 UTC</createdTime>
<ownerDesignName>Login_Authenticator</ownerDesignName>
<source>create or replace PROCEDURE Login(UNameEntry IN Accounts.Username%TYPE,&lt;br&gt;                                  PWordEntry IN Accounts.PWord%TYPE)&lt;br&gt;&lt;br&gt;IS&lt;br&gt;&lt;br&gt;  Invalid_User        EXCEPTION;&lt;br&gt;  Invalid_PWord       EXCEPTION;&lt;br&gt;  Locked_Out          EXCEPTION;&lt;br&gt;  Locking_Out         EXCEPTION;&lt;br&gt;&lt;br&gt;  IDVar               Accounts.ID%TYPE;&lt;br&gt;  UNameVar            Accounts.Username%TYPE;&lt;br&gt;  PWordVar            Accounts.PWord%TYPE;&lt;br&gt;  LockDateVar         Accounts.LockDate%TYPE;&lt;br&gt;  FailedCountVar      NUMERIC(2) NOT NULL := 0;&lt;br&gt;  UserCountVar        NUMERIC(2) NOT NULL := 0;&lt;br&gt;  CurrTimestampVar    TIMESTAMP;&lt;br&gt;&lt;br&gt;BEGIN&lt;br&gt;  SELECT LOCALTIMESTAMP INTO CurrTimestampVar FROM DUAL;&lt;br&gt;&lt;br&gt;  SELECT COUNT(Accounts.ID) INTO UserCountVar FROM Accounts&lt;br&gt;  WHERE Accounts.Username = UNameEntry;&lt;br&gt;  &lt;br&gt;  IF UserCountVar != 1 THEN&lt;br&gt;    RAISE Invalid_User;&lt;br&gt;  END IF;&lt;br&gt;  &lt;br&gt;  SELECT Accounts.Username INTO UNameVar FROM Accounts&lt;br&gt;  WHERE Accounts.Username = UNameEntry;&lt;br&gt;  SELECT Accounts.ID INTO IDVar FROM Accounts&lt;br&gt;  WHERE Accounts.Username = UNameEntry;&lt;br&gt;  SELECT Accounts.LockDate INTO LockDateVar FROM Accounts&lt;br&gt;  WHERE Accounts.Username = UNameEntry;&lt;br&gt;&lt;br&gt;  IF LockDateVar IS NOT NULL THEN&lt;br&gt;    INSERT INTO LoginAttempts VALUES (IDVar, CurrTimestampVar, &apos;N&apos;);&lt;br&gt;    RAISE Locked_Out;&lt;br&gt;  END IF;&lt;br&gt;&lt;br&gt;  SELECT Accounts.PWord INTO PWordVar FROM Accounts&lt;br&gt;  WHERE Accounts.Username = UNameEntry;&lt;br&gt;&lt;br&gt;  IF PWordEntry != PWordVar THEN&lt;br&gt;&lt;br&gt;    SELECT COUNT(LoginAttempts.Accounts_ID) INTO FailedCountVar FROM LoginAttempts&lt;br&gt;    WHERE LoginAttempts.Accounts_ID = IDVar&lt;br&gt;    AND LoginAttempts.WasSuccessful = &apos;N&apos;&lt;br&gt;    AND TRUNC(LoginAttempts.WhenAttempted) = TRUNC(CurrTimestampVar)&lt;br&gt;    AND LoginAttempts.WhenAttempted &gt; (SELECT Accounts.UnLockDate FROM Accounts WHERE Accounts.ID = IDVar);&lt;br&gt;&lt;br&gt;    INSERT INTO LoginAttempts VALUES (IDVar, CurrTimestampVar, &apos;N&apos;);&lt;br&gt;    FailedCountVar := FailedCountVar + 1;&lt;br&gt;&lt;br&gt;    IF FailedCountVar &lt; 3 THEN&lt;br&gt;      RAISE Invalid_PWord;&lt;br&gt;    ELSE&lt;br&gt;      UPDATE Accounts&lt;br&gt;        SET LockDate = CurrTimestampVar&lt;br&gt;        WHERE Accounts.ID = IDVar;&lt;br&gt;      RAISE Locking_Out;&lt;br&gt;    END IF;&lt;br&gt;  ELSE&lt;br&gt;    INSERT INTO LoginAttempts VALUES (IDVar, CurrTimestampVar, &apos;Y&apos;);&lt;br&gt;  &lt;br&gt;    UPDATE Sessions&lt;br&gt;      SET WhenTerminated = CurrTimestampVar&lt;br&gt;      WHERE Sessions.Accounts_ID = IDVar&lt;br&gt;      AND Sessions.WhenTerminated IS NULL;&lt;br&gt;  &lt;br&gt;    INSERT INTO Sessions VALUES (IDVar, CurrTimestampVar, NULL);&lt;br&gt;  END IF;&lt;br&gt;&lt;br&gt;EXCEPTION&lt;br&gt;  WHEN Invalid_User THEN&lt;br&gt;    RAISE_APPLICATION_ERROR(-20001, &apos;Invalid username.&apos;);&lt;br&gt;  WHEN Locked_Out THEN&lt;br&gt;    COMMIT;&lt;br&gt;    RAISE_APPLICATION_ERROR(-20002, &apos;The account is locked.&apos; || CHR(13) || CHR(10) || &apos;Please contact administrator for more information.&apos;);&lt;br&gt;  WHEN Invalid_PWord THEN&lt;br&gt;    COMMIT;&lt;br&gt;    RAISE_APPLICATION_ERROR (-20003, &apos;Invalid password.&apos; || CHR(13) || CHR(10) || (3 - FailedCountVar) || &apos; attempts left before the account will be locked!&apos;);&lt;br&gt;  WHEN Locking_Out THEN&lt;br&gt;    COMMIT;&lt;br&gt;    RAISE_APPLICATION_ERROR (-20004, &apos;Invalid password. The account is now locked!&apos; || CHR(13) || CHR(10) || &apos;Please contact administrator for more information.&apos;);&lt;br&gt;  WHEN OTHERS THEN&lt;br&gt;    RAISE_APPLICATION_ERROR (-20000, &apos;Unknown Error.&apos;);&lt;br&gt;&lt;br&gt;END Login;</source>
<body>create or replace PROCEDURE Login(UNameEntry IN Accounts.Username%TYPE,&lt;br&gt;                                  PWordEntry IN Accounts.PWord%TYPE)&lt;br&gt;&lt;br&gt;IS&lt;br&gt;&lt;br&gt;  Invalid_User        EXCEPTION;&lt;br&gt;  Invalid_PWord       EXCEPTION;&lt;br&gt;  Locked_Out          EXCEPTION;&lt;br&gt;  Locking_Out         EXCEPTION;&lt;br&gt;&lt;br&gt;  IDVar               Accounts.ID%TYPE;&lt;br&gt;  UNameVar            Accounts.Username%TYPE;&lt;br&gt;  PWordVar            Accounts.PWord%TYPE;&lt;br&gt;  LockDateVar         Accounts.LockDate%TYPE;&lt;br&gt;  FailedCountVar      NUMERIC(2) NOT NULL := 0;&lt;br&gt;  UserCountVar        NUMERIC(2) NOT NULL := 0;&lt;br&gt;  CurrTimestampVar    TIMESTAMP;&lt;br&gt;&lt;br&gt;BEGIN&lt;br&gt;  SELECT LOCALTIMESTAMP INTO CurrTimestampVar FROM DUAL;&lt;br&gt;&lt;br&gt;  SELECT COUNT(Accounts.ID) INTO UserCountVar FROM Accounts&lt;br&gt;  WHERE Accounts.Username = UNameEntry;&lt;br&gt;  &lt;br&gt;  IF UserCountVar != 1 THEN&lt;br&gt;    RAISE Invalid_User;&lt;br&gt;  END IF;&lt;br&gt;  &lt;br&gt;  SELECT Accounts.Username INTO UNameVar FROM Accounts&lt;br&gt;  WHERE Accounts.Username = UNameEntry;&lt;br&gt;  SELECT Accounts.ID INTO IDVar FROM Accounts&lt;br&gt;  WHERE Accounts.Username = UNameEntry;&lt;br&gt;  SELECT Accounts.LockDate INTO LockDateVar FROM Accounts&lt;br&gt;  WHERE Accounts.Username = UNameEntry;&lt;br&gt;&lt;br&gt;  IF LockDateVar IS NOT NULL THEN&lt;br&gt;    INSERT INTO LoginAttempts VALUES (IDVar, CurrTimestampVar, &apos;N&apos;);&lt;br&gt;    RAISE Locked_Out;&lt;br&gt;  END IF;&lt;br&gt;&lt;br&gt;  SELECT Accounts.PWord INTO PWordVar FROM Accounts&lt;br&gt;  WHERE Accounts.Username = UNameEntry;&lt;br&gt;&lt;br&gt;  IF PWordEntry != PWordVar THEN&lt;br&gt;&lt;br&gt;    SELECT COUNT(LoginAttempts.Accounts_ID) INTO FailedCountVar FROM LoginAttempts&lt;br&gt;    WHERE LoginAttempts.Accounts_ID = IDVar&lt;br&gt;    AND LoginAttempts.WasSuccessful = &apos;N&apos;&lt;br&gt;    AND TRUNC(LoginAttempts.WhenAttempted) = TRUNC(CurrTimestampVar)&lt;br&gt;    AND LoginAttempts.WhenAttempted &gt; (SELECT Accounts.UnLockDate FROM Accounts WHERE Accounts.ID = IDVar);&lt;br&gt;&lt;br&gt;    INSERT INTO LoginAttempts VALUES (IDVar, CurrTimestampVar, &apos;N&apos;);&lt;br&gt;    FailedCountVar := FailedCountVar + 1;&lt;br&gt;&lt;br&gt;    IF FailedCountVar &lt; 3 THEN&lt;br&gt;      RAISE Invalid_PWord;&lt;br&gt;    ELSE&lt;br&gt;      UPDATE Accounts&lt;br&gt;        SET LockDate = CurrTimestampVar&lt;br&gt;        WHERE Accounts.ID = IDVar;&lt;br&gt;      RAISE Locking_Out;&lt;br&gt;    END IF;&lt;br&gt;  ELSE&lt;br&gt;    INSERT INTO LoginAttempts VALUES (IDVar, CurrTimestampVar, &apos;Y&apos;);&lt;br&gt;  &lt;br&gt;    UPDATE Sessions&lt;br&gt;      SET WhenTerminated = CurrTimestampVar&lt;br&gt;      WHERE Sessions.Accounts_ID = IDVar&lt;br&gt;      AND Sessions.WhenTerminated IS NULL;&lt;br&gt;  &lt;br&gt;    INSERT INTO Sessions VALUES (IDVar, CurrTimestampVar, NULL);&lt;br&gt;  END IF;&lt;br&gt;&lt;br&gt;EXCEPTION&lt;br&gt;  WHEN Invalid_User THEN&lt;br&gt;    RAISE_APPLICATION_ERROR(-20001, &apos;Invalid username.&apos;);&lt;br&gt;  WHEN Locked_Out THEN&lt;br&gt;    COMMIT;&lt;br&gt;    RAISE_APPLICATION_ERROR(-20002, &apos;The account is locked.&apos; || CHR(13) || CHR(10) || &apos;Please contact administrator for more information.&apos;);&lt;br&gt;  WHEN Invalid_PWord THEN&lt;br&gt;    COMMIT;&lt;br&gt;    RAISE_APPLICATION_ERROR (-20003, &apos;Invalid password.&apos; || CHR(13) || CHR(10) || (3 - FailedCountVar) || &apos; attempts left before the account will be locked!&apos;);&lt;br&gt;  WHEN Locking_Out THEN&lt;br&gt;    COMMIT;&lt;br&gt;    RAISE_APPLICATION_ERROR (-20004, &apos;Invalid password. The account is now locked!&apos; || CHR(13) || CHR(10) || &apos;Please contact administrator for more information.&apos;);&lt;br&gt;  WHEN OTHERS THEN&lt;br&gt;    RAISE_APPLICATION_ERROR (-20000, &apos;Unknown Error.&apos;);&lt;br&gt;&lt;br&gt;END Login;</body>
</StoredProcedureOraclev10g>